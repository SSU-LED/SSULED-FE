name: Deploy Frontend to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: |
          # 환경 변수 설정
          echo "${{ secrets.FRONTEND_ENV }}" > .env.production

          # Vite 빌드
          npm run build

          # 빌드 결과 확인
          echo "Checking build output..."
          ls -la
          if [ -d "dist" ]; then
            echo "✅ dist directory found"
            ls -la dist
          else
            echo "❌ dist directory not found"
            echo "Available directories:"
            find . -maxdepth 2 -type d
            exit 1
          fi

      - name: Prepare deployment files
        run: |
          mkdir -p deploy

          # Vite 빌드 결과물 복사
          echo "Copying dist directory..."
          cp -r dist deploy/

          # 필수 파일들 복사
          cp package.json deploy/
          cp package-lock.json deploy/

          # 환경 변수 파일 복사
          cp .env.production deploy/

          # 배포 내용 확인
          echo "Deployment package contents:"
          ls -la deploy/

          # 압축
          tar -czf deploy.tar.gz deploy

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "Host *
            ServerAliveInterval 60
            ServerAliveCountMax 30" > ~/.ssh/config
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Transfer files to EC2
        run: scp deploy.tar.gz ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/

      - name: Deploy application
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "
            set -e  # 에러 발생시 스크립트 중단
            
            echo '🚀 Starting frontend deployment...'
            
            # 배포 디렉토리 생성
            mkdir -p /home/${{ secrets.EC2_USERNAME }}/apps/frontend
            
            # 압축 해제
            tar -xzf deploy.tar.gz
            
            # 기존 파일 백업 (롤백용)
            if [ -d '/home/${{ secrets.EC2_USERNAME }}/apps/frontend/dist' ]; then
              mv /home/${{ secrets.EC2_USERNAME }}/apps/frontend/dist /home/${{ secrets.EC2_USERNAME }}/apps/frontend/dist.backup.\$(date +%Y%m%d_%H%M%S) || true
            fi
            
            # 파일 복사
            cp -r deploy/dist /home/${{ secrets.EC2_USERNAME }}/apps/frontend/
            cp -f deploy/package.json /home/${{ secrets.EC2_USERNAME }}/apps/frontend/
            cp -f deploy/package-lock.json /home/${{ secrets.EC2_USERNAME }}/apps/frontend/
            cp -f deploy/.env.production /home/${{ secrets.EC2_USERNAME }}/apps/frontend/
            
            # 디렉토리 이동
            cd /home/${{ secrets.EC2_USERNAME }}/apps/frontend
            
            # serve 패키지 설치 확인
            echo '📦 Installing serve globally...'
            npm install -g serve
            
            # serve 설치 확인
            which serve || (echo '❌ serve not found' && exit 1)
            
            # 기존 프로세스 정리
            echo '🛑 Stopping existing frontend process...'
            pm2 stop ssuled-client || true
            pm2 delete ssuled-client || true
            
            # 포트 사용 확인 및 정리
            echo '🔍 Checking port 3000...'
            lsof -ti :3000 | xargs -r kill -9 || true
            sleep 2
            
            # PM2 ecosystem 파일 생성 (한 줄로 작성)
            echo 'module.exports = {apps: [{name: \"ssuled-client\", script: \"serve\", args: [\"-s\", \"dist\", \"-l\", \"3000\"], cwd: \"/home/${{ secrets.EC2_USERNAME }}/apps/frontend\", instances: 1, autorestart: true, watch: false, max_memory_restart: \"200M\", env: {PORT: 3000}, error_file: \"./logs/client-err.log\", out_file: \"./logs/client-out.log\", log_file: \"./logs/client-combined.log\", time: true}]};' > ecosystem.config.js
            
            # 로그 디렉토리 생성
            mkdir -p logs
            
            echo '🚀 Starting new frontend process with ecosystem...'
            pm2 start ecosystem.config.js
            
            # 프로세스 시작 대기
            sleep 5
            
            # 프로세스 상태 확인
            echo '🔍 Checking process status...'
            pm2 list | grep ssuled-client
            
            # 프로세스가 online 상태인지 확인
            if pm2 show ssuled-client | grep -q 'online'; then
              echo '✅ Frontend process is online'
            else
              echo '❌ Frontend process failed to start'
              echo 'PM2 status:'
              pm2 list
              echo 'PM2 logs:'
              pm2 logs ssuled-client --lines 20
              exit 1
            fi
            
            # 포트 확인
            if netstat -tlnp | grep :3000; then
              echo '✅ Port 3000 is listening'
            else
              echo '❌ Port 3000 is not listening'
              exit 1
            fi
            
            # 로컬 HTTP 테스트
            echo '🌐 Testing local HTTP response...'
            if curl -f -s http://localhost:3000 > /dev/null; then
              echo '✅ Local HTTP test passed'
            else
              echo '❌ Local HTTP test failed'
              curl -I http://localhost:3000 || true
              exit 1
            fi
            
            # PM2 설정 저장
            pm2 save
            
            # 임시 파일 정리
            rm -rf /home/${{ secrets.EC2_USERNAME }}/deploy
            rm /home/${{ secrets.EC2_USERNAME }}/deploy.tar.gz
            
            # 오래된 백업 파일 정리 (7일 이상된 것들)
            find /home/${{ secrets.EC2_USERNAME }}/apps/frontend -name 'dist.backup.*' -mtime +7 -exec rm -rf {} + || true
            
            echo '🎉 Frontend deployment completed successfully!'
          "

      - name: Verify deployment
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "
            echo '📊 Final Verification:'
            
            echo '1. PM2 Process Status:'
            pm2 list
            
            echo '2. Frontend Application Info:'
            pm2 info ssuled-client
            
            echo '3. Port Status:'
            netstat -tlnp | grep :3000
            
            echo '4. Process Logs (last 10 lines):'
            pm2 logs ssuled-client --lines 10
            
            echo '5. HTTP Test:'
            curl -I http://localhost:3000
            
            echo '✅ Verification completed!'
            echo '🌐 Frontend should be available at: https://ounwan.site'
          "

      - name: Rollback on failure
        if: failure()
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "
            echo '❌ Deployment failed. Attempting rollback...'
            
            cd /home/${{ secrets.EC2_USERNAME }}/apps/frontend
            
            # 최신 백업 찾기
            LATEST_BACKUP=\$(ls -t dist.backup.* 2>/dev/null | head -n1)
            
            if [ ! -z \"\$LATEST_BACKUP\" ]; then
              echo \"Rolling back to: \$LATEST_BACKUP\"
              
              # 현재 실패한 버전 제거
              rm -rf dist
              
              # 백업으로 복원
              mv \"\$LATEST_BACKUP\" dist
              
              # 서비스 재시작
              pm2 restart ssuled-client
              
              echo '✅ Rollback completed'
            else
              echo '⚠️  No backup found for rollback'
            fi
          " || true
